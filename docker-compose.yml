version: "3.8"
services:
  postgres:
    image: postgres:alpine
    container_name: postgresql_c
    networks:
      - internal
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
  dbadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - internal
    ports:
      - 5050:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
  nodejs:
    build: ./back
    depends_on: 
      postgres:
        condition: service_healthy
    ports:
      - 3000:3000
    container_name: nodejs_c
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TOKEN_SECRET=${TOKEN_SECRET}
      - EXPIRE_TIME_TOKEN=${EXPIRE_TIME_TOKEN}
      - MAX_WORDS_QUANTITY=${MAX_WORDS_QUANTITY}
      - PORT=${PORT}
    # env_file:
    #   - .env
    volumes:
      - type: bind
        source: ./back/
        target: /usr/src/app/back/
    restart: unless-stopped
    command: npm run dev:server
    # command: tail -f /dev/null
    networks: 
     - internal
networks: 
  internal:
    driver: bridge
volumes:
  pgdata:
    driver: local